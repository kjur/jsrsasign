/*! crypto-1.1.1.js (c) 2013 Kenji Urushima | kjur.github.com/jsrsasign/license
 */
if(typeof KJUR=="undefined"||!KJUR){KJUR={}}if(typeof KJUR.crypto=="undefined"||!KJUR.crypto){KJUR.crypto={}}KJUR.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414",};this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",};this.getDigestInfoHex=function(a,b){if(typeof this.DIGESTINFOHEAD[b]=="undefined"){throw"alg not supported in Util.DIGESTINFOHEAD: "+b}return this.DIGESTINFOHEAD[b]+a};this.getPaddedDigestInfoHex=function(h,a,j){var c=this.getDigestInfoHex(h,a);var d=j/4;if(c.length+22>d){throw"key is too short for SigAlg: keylen="+j+","+a}var b="0001";var k="00"+c;var g="";var l=d-b.length-k.length;for(var f=0;f<l;f+=2){g+="ff"}var e=b+g+k;return e};this.hashString=function(a,c){var b=new KJUR.crypto.MessageDigest({alg:c});return b.digestString(a)};this.hashHex=function(b,c){var a=new KJUR.crypto.MessageDigest({alg:c});return a.digestHex(b)};this.sha1=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha1",prov:"cryptojs"});return b.digestString(a)};this.sha256=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha256",prov:"cryptojs"});return b.digestString(a)};this.sha256Hex=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha256",prov:"cryptojs"});return b.digestHex(a)};this.sha512=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha512",prov:"cryptojs"});return b.digestString(a)};this.sha512Hex=function(a){var b=new KJUR.crypto.MessageDigest({alg:"sha512",prov:"cryptojs"});return b.digestHex(a)};this.md5=function(a){var b=new KJUR.crypto.MessageDigest({alg:"md5",prov:"cryptojs"});return b.digestString(a)};this.ripemd160=function(a){var b=new KJUR.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"});return b.digestString(a)}};KJUR.crypto.MessageDigest=function(params){var md=null;var algName=null;var provName=null;var _CryptoJSMdName={md5:"CryptoJS.algo.MD5",sha1:"CryptoJS.algo.SHA1",sha224:"CryptoJS.algo.SHA224",sha256:"CryptoJS.algo.SHA256",sha384:"CryptoJS.algo.SHA384",sha512:"CryptoJS.algo.SHA512",ripemd160:"CryptoJS.algo.RIPEMD160"};this.setAlgAndProvider=function(alg,prov){if(alg!=null&&prov===undefined){prov=KJUR.crypto.Util.DEFAULTPROVIDER[alg]}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(alg)!=-1&&prov=="cryptojs"){try{this.md=eval(_CryptoJSMdName[alg]).create()}catch(ex){throw"setAlgAndProvider hash alg set fail alg="+alg+"/"+ex}this.updateString=function(str){this.md.update(str)};this.updateHex=function(hex){var wHex=CryptoJS.enc.Hex.parse(hex);this.md.update(wHex)};this.digest=function(){var hash=this.md.finalize();return hash.toString(CryptoJS.enc.Hex)};this.digestString=function(str){this.updateString(str);return this.digest()};this.digestHex=function(hex){this.updateHex(hex);return this.digest()}}if(":sha256:".indexOf(alg)!=-1&&prov=="sjcl"){try{this.md=new sjcl.hash.sha256()}catch(ex){throw"setAlgAndProvider hash alg set fail alg="+alg+"/"+ex}this.updateString=function(str){this.md.update(str)};this.updateHex=function(hex){var baHex=sjcl.codec.hex.toBits(hex);this.md.update(baHex)};this.digest=function(){var hash=this.md.finalize();return sjcl.codec.hex.fromBits(hash)};this.digestString=function(str){this.updateString(str);return this.digest()};this.digestHex=function(hex){this.updateHex(hex);return this.digest()}}};this.updateString=function(str){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.updateHex=function(hex){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestString=function(str){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestHex=function(hex){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};if(params!==undefined){if(params.alg!==undefined){this.algName=params.alg;if(params.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Signature=function(g){var j=null;var i=null;var l=null;var p=null;var c=null;var n=null;var b=null;var o=null;var e=null;var a=null;var f=null;var d=null;var m=null;var h=null;this._setAlgNames=function(){if(this.algName.match(/^(.+)with(.+)$/)){this.mdAlgName=RegExp.$1.toLowerCase();this.pubkeyAlgName=RegExp.$2.toLowerCase()}};this._zeroPaddingOfSignature=function(v,u){var t="";var q=u/4-v.length;for(var r=0;r<q;r++){t=t+"0"}return t+v};this.setAlgAndProvider=function(s,r){this._setAlgNames();if(r!="cryptojs/jsrsa"){throw"provider not supported: "+r}if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)!=-1){try{this.md=new KJUR.crypto.MessageDigest({alg:this.mdAlgName,prov:"cryptojs"})}catch(q){throw"setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+q}this.initSign=function(t){if(typeof t.ecprvhex=="string"&&typeof t.eccurvename=="string"){this.ecprvhex=t.ecprvhex;this.eccurvename=t.eccurvename}else{this.prvKey=t}this.state="SIGN"};this.initVerifyByPublicKey=function(t){if(typeof t.ecpubhex=="string"&&typeof t.eccurvename=="string"){this.ecpubhex=t.ecpubhex;this.eccurvename=t.eccurvename}else{this.pubKey=t}this.state="VERIFY"};this.initVerifyByCertificatePEM=function(t){var u=new X509();u.readCertPEM(t);this.pubKey=u.subjectPublicKeyRSA;this.state="VERIFY"};this.updateString=function(t){this.md.updateString(t)};this.updateHex=function(t){this.md.updateHex(t)};this.sign=function(){if(typeof this.ecprvhex!="undefined"&&typeof this.eccurvename!="undefined"){var v=new KJUR.crypto.ECDSA({curve:this.eccurvename});this.sHashHex=this.md.digest();this.hSign=v.signHex(this.sHashHex,this.ecprvhex);return this.hSign}else{var t=KJUR.crypto.Util;var u=this.prvKey.n.bitLength();this.sHashHex=this.md.digest();this.hDigestInfo=t.getDigestInfoHex(this.sHashHex,this.mdAlgName);this.hPaddedDigestInfo=t.getPaddedDigestInfoHex(this.sHashHex,this.mdAlgName,u);var x=parseBigInt(this.hPaddedDigestInfo,16);this.hoge=x.toString(16);var w=this.prvKey.doPrivate(x);this.hSign=this._zeroPaddingOfSignature(w.toString(16),u);return this.hSign}};this.signString=function(t){this.updateString(t);this.sign()};this.signHex=function(t){this.updateHex(t);this.sign()};this.verify=function(v){if(typeof this.ecpubhex!="undefined"&&typeof this.eccurvename!="undefined"){this.sHashHex=this.md.digest();var z=new KJUR.crypto.ECDSA({curve:this.eccurvename});return z.verifyHex(this.sHashHex,v,this.ecpubhex)}else{var y=KJUR.crypto.Util;var t=this.pubKey.n.bitLength();this.sHashHex=this.md.digest();var u=parseBigInt(v,16);var w=this.pubKey.doPublic(u);this.hPaddedDigestInfo=w.toString(16);var B=this.hPaddedDigestInfo;B=B.replace(/^1ff+00/,"");var x=KJUR.crypto.Util.DIGESTINFOHEAD[this.mdAlgName];if(B.indexOf(x)!=0){return false}var A=B.substr(x.length);return(A==this.sHashHex)}}}};this.initVerifyByPublicKey=function(q){throw"initVerifyByPublicKey(rsaPubKeyy) not supported for this alg:prov="+this.algProvName};this.initVerifyByCertificatePEM=function(q){throw"initVerifyByCertificatePEM(certPEM) not supported for this alg:prov="+this.algProvName};this.initSign=function(q){throw"initSign(prvKey) not supported for this alg:prov="+this.algProvName};this.updateString=function(q){throw"updateString(str) not supported for this alg:prov="+this.algProvName};this.updateHex=function(q){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName};this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName};this.signString=function(q){throw"digestString(str) not supported for this alg:prov="+this.algProvName};this.signHex=function(q){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName};this.verify=function(q){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName};if(g!==undefined){if(g.alg!==undefined){this.algName=g.alg;if(g.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}else{this.provName=g.prov}this.algProvName=this.algName+":"+this.provName;this.setAlgAndProvider(this.algName,this.provName);this._setAlgNames()}if(typeof g.prvkeypem!="undefined"){if(typeof g.prvkeypas!="undefined"){throw"both prvkeypem and prvkeypas parameters not supported"}else{try{var j=new RSAKey();j.readPrivateKeyFromPEMString(g.prvkeypem);this.initSign(j)}catch(k){throw"fatal error to load pem private key: "+k}}}}};