import test from "ava";
import { BigInteger } from "../lib/jsrsasign";

test("BigInteger.ZERO", (t) => {
  t.true(BigInteger.ZERO instanceof BigInteger);
  t.is(BigInteger.ZERO.toString(), "0");
});

test("BigInteger.ONE", (t) => {
  t.true(BigInteger.ONE instanceof BigInteger);
  t.is(BigInteger.ONE.toString(), "1");
});

test("BigInteger constructor", (t) => {
  const str = "10000000000000000000000000000";
  const big = new BigInteger(str);
  t.is(big.toString(), str);
});

test("BigInteger#add", (t) => {
  const one = BigInteger.ONE;
  const two = one.add(one);
  t.is(two.toString(), "2");

  const big = new BigInteger("40000000000000000000000000");
  t.is(big.add(one).toString(), "40000000000000000000000001");
});

test("BigInteger#multiply", (t) => {
  const a = new BigInteger("14281401204012401204120302105");
  const b = new BigInteger("588681828021801028580125108412804208");
  const expected = "8407201367490770511323848067846355156591769944900879987175257840";
  t.is(a.multiply(b).toString(), expected);
});

test("BigInteger#pow", (t) => {
  const a = new BigInteger("12192912994213");
  const b = new BigInteger("91");
  const expected = "685141392036869922556684388181087104303022482860015040068219773995713158514685019758628838524287599320876037559053699103898891203280177263541442593054899991016167336534975299310739902639384759352068613829280299767817833936282270853384113161595735980875864078040553998766308755701979200051603721554488433652718158726677614430366377540315395174736632998454616293763979918264988936090748996179780553692165246678261117701132009542102952106009365087367791303289723577810134906027364488643567855953203965202184595675667847077197501568277452939482036704616021682510355268067306103512637701415765075165840815333201707498147140552292395132238692687231406537897018275677056204012640051446091287876172949101764418925785964486109877348537796796396612878395635670386884486882475248848852058879525786040936183044212570344583975780275365066403301427686060633476470823128213585573341156127442959931163638016195565693160396547181831026350184236772093796271233604992524136448217061926712820897455954448107183623313888997716123989010947404408432430716661192865102302775667891553694258904840646532727810651321338961655234276560592657184150527454765472220896133699354587657722669319256870545281130726533322874237";
  t.is(a.pow(b).toString(), expected);
});

